{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const HttpProvider = require('ethjs-provider-http')\nconst Eth = require('ethjs-query')\nconst EthContract = require('ethjs-contract')\nconst DidRegistryContract = require('ethr-did-resolver/contracts/ethr-did-registry.json')\nconst {\n  createJWT,\n  verifyJWT,\n  SimpleSigner,\n  toEthereumAddress\n} = require('did-jwt')\nconst { Buffer } = require('buffer')\nconst {\n  REGISTRY,\n  stringToBytes32,\n  delegateTypes\n} = require('ethr-did-resolver')\nconst EC = require('elliptic').ec\nconst secp256k1 = new EC('secp256k1')\nconst { Secp256k1VerificationKey2018 } = delegateTypes\nconst Web3 = require('web3')\nconst EthereumTx = require('ethereumjs-tx').Transaction\nconst Common = require('ethereumjs-common')\n\nfunction configureProvider (conf = {}) {\n  if (conf.provider) {\n    return conf.provider\n  } else if (conf.web3) {\n    return conf.web3.currentProvider\n  } else {\n    return new HttpProvider(conf.rpcUrl || 'https://mainnet.infura.io/ethr-did')\n  }\n}\n\nfunction attributeToHex (key, value) {\n  if (Buffer.isBuffer(value)) {\n    return `0x${value.toString('hex')}`\n  }\n  const match = key.match(/^did\\/(pub|auth|svc)\\/(\\w+)(\\/(\\w+))?(\\/(\\w+))?$/)\n  if (match) {\n    const encoding = match[6]\n    // TODO add support for base58\n    if (encoding === 'base64') {\n      return `0x${Buffer.from(value, 'base64').toString('hex')}`\n    }\n  }\n  if (value.match(/^0x[0-9a-fA-F]*$/)) {\n    return value\n  }\n  return `0x${Buffer.from(value).toString('hex')}`\n}\n\nclass EthrDID {\n  constructor (conf = {}) {\n    const provider = configureProvider(conf)\n    const eth = new Eth(provider)\n    const registryAddress = conf.registry || REGISTRY\n    const DidReg = new EthContract(eth)(DidRegistryContract)\n    this.registry = DidReg.at(registryAddress)\n    this.address = conf.address\n    this.registryAddress = registryAddress\n\n    this.web3Provider = new Web3.providers.HttpProvider(conf.providerUrl)\n    this.web3 = new Web3(this.web3Provider)\n    this.privateKey = conf.privateKey\n    this.chainId = conf.chainId\n    this.networkId = conf.networkId\n    this.registryInstance = new this.web3.eth.Contract(\n      DidRegistryContract,\n      registryAddress\n    )\n\n    if (!this.address) throw new Error('No address is set for EthrDid')\n    this.did = `did:ethr:${this.address}`\n    if (conf.signer) {\n      this.signer = conf.signer\n    } else if (conf.privateKey) {\n      this.signer = SimpleSigner(conf.privateKey)\n    }\n  }\n\n  async createKeyPair () {\n    const kp = secp256k1.genKeyPair()\n    const publicKey = kp.getPublic('hex')\n    const privateKey = kp.getPrivate('hex')\n    const address = toEthereumAddress(publicKey)\n    return { address, privateKey }\n  }\n\n  async getAccountNonce (address) {\n    return await this.web3.eth.getTransactionCount(address)\n  }\n\n  async estimateGas (method, from, ...params) {\n    return await method(...params).estimateGas({ from })\n  }\n\n  async getGasPrice () {\n    return await this.web3.eth.getGasPrice()\n  }\n\n  async toHex (value) {\n    return this.web3.utils.toHex(value)\n  }\n\n  async getData (method, ...params) {\n    return method(...params).encodeABI()\n  }\n\n  async sendRawTransaction (transaction) {\n    return this.web3.eth.sendSignedTransaction(`${transaction.toString('hex')}`)\n  }\n\n  async signTransaction (nonce, to, value, data, gasLimit, gasPrice) {\n    const privateKey = Buffer.from(this.privateKey, 'hex')\n    const txParams = {\n      nonce: await this.toHex(nonce),\n      gasPrice: await this.toHex(gasPrice),\n      gasLimit: await this.toHex(gasLimit),\n      to,\n      value: await this.toHex(value),\n      data\n    }\n\n    const customCommon = Common.default.forCustomChain(\n      'mainnet',\n      {\n        name: 'my-network',\n        networkId: Number(this.networkId),\n        chainId: Number(this.chainId)\n      },\n      'petersburg'\n    )\n\n    const tx = new EthereumTx(txParams, { common: customCommon })\n    tx.sign(privateKey)\n\n    return tx.serialize()\n  }\n\n  async signAndSendTxRoot (from, contractAddress, method, value, ...args) {\n    const gasPrice = await this.getGasPrice()\n    const gasLimit = await this.estimateGas(method, from, ...args)\n    const inputData = await this.getData(method, ...args)\n    const nonce = await this.getAccountNonce(from)\n    const methodRawTransaction = await this.signTransaction(\n      nonce,\n      contractAddress,\n      value,\n      inputData,\n      gasLimit,\n      gasPrice\n    )\n\n    return await this.sendRawTransaction(methodRawTransaction)\n  }\n\n  async lookupOwner (cache = true) {\n    if (cache && this.owner) return this.owner\n    return await this.registryInstance.methods\n      .identityOwner(this.address)\n      .call()\n  }\n\n  async changeOwner (newOwner) {\n    const owner = await this.lookupOwner()\n    const txHash = await this.registry.changeOwner(this.address, newOwner, {\n      from: owner\n    })\n    this.owner = newOwner\n    return txHash\n  }\n\n  async addDelegate (delegate, options = {}) {\n    const delegateType = options.delegateType || Secp256k1VerificationKey2018\n    const expiresIn = options.expiresIn || 86400\n    const from = await this.lookupOwner()\n    const method = this.registryInstance.methods.addDelegate\n    const to = this.registryAddress\n\n    return await this.signAndSendTxRoot(\n      from,\n      to,\n      method,\n      0x0,\n      this.address,\n      delegateType,\n      delegate,\n      expiresIn\n    )\n  }\n\n  async revokeDelegate (delegate, delegateType = Secp256k1VerificationKey2018) {\n    const owner = await this.lookupOwner()\n    return this.registry.revokeDelegate(this.address, delegateType, delegate, {\n      from: owner\n    })\n  }\n\n  async setAttribute (key, value, expiresIn = 86400, gasLimit) {\n    const from = await this.lookupOwner()\n    const method = this.registryInstance.methods.setAttribute\n    const to = this.registryAddress\n\n    return await this.signAndSendTxRoot(\n      from,\n      to,\n      method,\n      0x0,\n      this.address,\n      stringToBytes32(key),\n      attributeToHex(key, value),\n      expiresIn\n    )\n  }\n\n  async revokeAttribute (key, value, gasLimit) {\n    const owner = await this.lookupOwner()\n    return this.registry.revokeAttribute(\n      this.address,\n      stringToBytes32(key),\n      attributeToHex(key, value),\n      {\n        from: owner,\n        gas: gasLimit\n      }\n    )\n  }\n\n  // Create a temporary signing delegate able to sign JWT on behalf of identity\n  async createSigningDelegate (\n    delegateType = Secp256k1VerificationKey2018,\n    expiresIn = 86400\n  ) {\n    const kp = EthrDID.createKeyPair()\n    this.signer = SimpleSigner(kp.privateKey)\n    const txHash = await this.addDelegate(kp.address, {\n      delegateType,\n      expiresIn\n    })\n    return { kp, txHash }\n  }\n\n  async signJWT (payload, expiresIn) {\n    if (typeof this.signer !== 'function') {\n      throw new Error('No signer configured')\n    }\n    const options = { signer: this.signer, alg: 'ES256K-R', issuer: this.did }\n    if (expiresIn) options.expiresIn = expiresIn\n    return createJWT(payload, options)\n  }\n\n  async verifyJWT (jwt, resolver, audience = this.did) {\n    return verifyJWT(jwt, { resolver, audience })\n  }\n}\n\nmodule.exports = EthrDID\n"],"names":["const","HttpProvider","require","Eth","EthContract","DidRegistryContract","secp256k1","EC","ec","Web3","EthereumTx","Transaction","Common","attributeToHex","key","value","Buffer","isBuffer","toString","match","from","EthrDID","constructor","conf","provider","web3","currentProvider","rpcUrl","configureProvider","eth","registryAddress","registry","REGISTRY","DidReg","at","address","web3Provider","providers","providerUrl","this","privateKey","chainId","networkId","registryInstance","Contract","Error","did","signer","SimpleSigner","createKeyPair","kp","genKeyPair","publicKey","getPublic","getPrivate","toEthereumAddress","getAccountNonce","getTransactionCount","estimateGas","method","params","getGasPrice","toHex","utils","getData","encodeABI","sendRawTransaction","transaction","sendSignedTransaction","signTransaction","nonce","to","data","gasLimit","gasPrice","_this5","txParams","customCommon","default","forCustomChain","name","Number","tx","common","sign","serialize","signAndSendTxRoot","contractAddress","_this6","args","inputData","methodRawTransaction","lookupOwner","cache","owner","methods","identityOwner","call","changeOwner","newOwner","_this8","txHash","addDelegate","delegate","options","delegateType","Secp256k1VerificationKey2018","expiresIn","_this9","revokeDelegate","_this10","setAttribute","_this11","stringToBytes32","revokeAttribute","_this12","gas","createSigningDelegate","signJWT","payload","alg","issuer","createJWT","verifyJWT","jwt","resolver","audience","module","exports"],"mappings":"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"}